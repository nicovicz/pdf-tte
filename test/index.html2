<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>'Hello, world!' example</title>
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1"
    />
    <meta name="google" content="notranslate" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>
  </head>
  <body>
    <button id="show-pdf-button">Show PDF</button>

    <div
      id="annotation-layer"
      style="width: 20px; height: 20px; background: red;"
    ></div>

    <div id="pdf-main-container">
      <div id="pdf-loader">Loading document ...</div>
      <div id="pdf-contents">
        <div id="pdf-meta">
          <div id="pdf-buttons">
            <button id="pdf-prev">Previous</button>
            <button id="pdf-next">Next</button>
          </div>
          <div id="page-count-container">
            Page
            <div id="pdf-current-page"></div>
            of
            <div id="pdf-total-pages"></div>
          </div>
        </div>
        <canvas id="pdf-canvas" width="400"></canvas>
        <div id="page-loader">Loading page ...</div>
      </div>
    </div>

    <script src="../build/pdf.js"></script>
    <script src="../build/pdf.worker.js"></script>

    <script>
      interact("#pdf-canvas").dropzone({
        accept: "#annotation-layer",
      });

      interact("#annotation-layer").draggable({
        inertia: true,
        modifiers: [
          interact.modifiers.restrictRect({
            restriction: "parent",
            endOnly: true,
          }),
        ],
        autoScroll: true,

        listeners: { move: dragMoveListener },
      });

      function dragMoveListener(event) {
        var target = event.target;
        // keep the dragged position in the data-x/data-y attributes
        var x = (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
        var y = (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;

        // translate the element
        target.style.webkitTransform = target.style.transform =
          "translate(" + x + "px, " + y + "px)";
        console.log(x, y);
        // update the posiion attributes
        target.setAttribute("data-x", x);
        target.setAttribute("data-y", y);
      }
      var _PDF_DOC,
        _CURRENT_PAGE,
        _TOTAL_PAGES,
        _PAGE_RENDERING_IN_PROGRESS = 0,
        _CANVAS = document.querySelector("#pdf-canvas");

      // initialize and load the PDF
      function showPDF(pdf_url) {
        document.querySelector("#pdf-loader").style.display = "block";

        var doc = pdfjsLib.getDocument({ url: pdf_url });
        doc.promise.then(function (pdf) {
          _PDF_DOC = pdf;
          _TOTAL_PAGES = pdf.numPages;
          document.querySelector("#pdf-loader").style.display = "none";
          document.querySelector("#pdf-contents").style.display = "block";
          document.querySelector("#pdf-total-pages").innerHTML = _TOTAL_PAGES;
          showPage(1);
        });
      }

      // load and render specific page of the PDF
      function showPage(page_no) {
        _PAGE_RENDERING_IN_PROGRESS = 1;
        _CURRENT_PAGE = page_no;

        // disable Previous & Next buttons while page is being loaded
        document.querySelector("#pdf-next").disabled = true;
        document.querySelector("#pdf-prev").disabled = true;

        // while page is being rendered hide the canvas and show a loading message
        document.querySelector("#pdf-canvas").style.display = "none";
        document.querySelector("#page-loader").style.display = "block";

        // update current page
        document.querySelector("#pdf-current-page").innerHTML = page_no;

        // get handle of page
        try {
          var page = _PDF_DOC.getPage(page_no).then(function (page) {
            // original width of the pdf page at scale 1
            var pdf_original_width = page.getViewport({ scale: 1 }).width;

            // as the canvas is of a fixed width we need to adjust the scale of the viewport where page is rendered
            var scale_required = _CANVAS.width / pdf_original_width;

            // get viewport to render the page at required scale
            var viewport = page.getViewport({ scale: scale_required });

            // set canvas height same as viewport height
            _CANVAS.height = viewport.height;

            // setting page loader height for smooth experience
            document.querySelector("#page-loader").style.height =
              _CANVAS.height + "px";
            document.querySelector("#page-loader").style.lineHeight =
              _CANVAS.height + "px";

            var render_context = {
              canvasContext: _CANVAS.getContext("2d"),
              viewport: viewport,
            };

            // render the page contents in the canvas
            try {
              page.render(render_context);
            } catch (error) {
              alert(error.message);
            }

            _PAGE_RENDERING_IN_PROGRESS = 0;

            // re-enable Previous & Next buttons
            document.querySelector("#pdf-next").disabled = false;
            document.querySelector("#pdf-prev").disabled = false;

            // show the canvas and hide the page loader
            document.querySelector("#pdf-canvas").style.display = "block";
            document.querySelector("#page-loader").style.display = "none";
          });
        } catch (error) {
          alert(error.message);
        }
      }

      // click on "Show PDF" buuton
      document
        .querySelector("#show-pdf-button")
        .addEventListener("click", function () {
          this.style.display = "none";
          showPDF(
            "https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf"
          );
        });

      // click on the "Previous" page button
      document
        .querySelector("#pdf-prev")
        .addEventListener("click", function () {
          if (_CURRENT_PAGE != 1) showPage(--_CURRENT_PAGE);
        });

      // click on the "Next" page button
      document
        .querySelector("#pdf-next")
        .addEventListener("click", function () {
          if (_CURRENT_PAGE != _TOTAL_PAGES) showPage(++_CURRENT_PAGE);
        });
    </script>
  </body>
</html>
